#Introduction
#In this lesson, we will be learning different SQL commands to query a single table in a database.

#One of the core purposes of the SQL language is to retrieve information stored in a database. This is commonly referred to as querying. Queries allow us to communicate with the database by asking questions and having the result set return data relevant to the question.

#We will be querying a database with one table named movies.

SELECT * FROM movies

SELECT name, genre
FROM movies;


#As
#Knowing how SELECT works, suppose we have the code below:

SELECT name AS 'Titles'
FROM movies;

#AS is a keyword in SQL that allows you to rename a column or table using an alias. The new name can be anything you want as long as you put it inside of single quotes. Here we renamed the name column as Titles.

#It is important to remember that the columns have not been renamed in the table. The aliases only appear in the result.

SELECT name AS 'title'
FROM movies;

SELECT imdb_rating AS 'IMDb'
FROM movies;


#Distinct
#When we are examining data in a table, it can be helpful to know what distinct values exist in a particular column.

#DISTINCT is used to return unique values in the output. It filters out all duplicate values in the specified column(s).

SELECT DISTINCT genre
FROM movies;

SELECT DISTINCT year
FROM movies;


#Where
#We can restrict our query results using the WHERE clause in order to obtain only the information we want.

#Following this format, the statement below filters the result set to only include top rated movies (IMDb ratings greater than 8):

SELECT *
FROM movies
WHERE imdb_rating > 8;


SELECT *
FROM movies
WHERE imdb_rating < 5;


SELECT *
FROM movies
WHERE year > 2014;



#Like I
#LIKE can be a useful operator when you want to compare similar values.

#The movies table contains two films with similar titles, ‘Se7en’ and ‘Seven’.

#How could we select all movies that start with ‘Se’ and end with ‘en’ and have exactly one character in the middle?

#The _ means you can substitute any individual character here without breaking the pattern.

SELECT *
FROM movies
WHERE name LIKE 'Se_en';


#Like II
#The percentage sign % is another wildcard character that can be used with LIKE.

#This statement below filters the result set to only include movies with names that begin with the letter ‘A’:

SELECT *
FROM movies
WHERE name LIKE 'A%';
% is a wildcard character that matches zero or more missing letters in the pattern. For example:

#A% matches all movies with names that begin with letter ‘A’
#%a matches all movies that end with ‘a’
#We can also use % both before and after a pattern:

SELECT *
FROM movies
WHERE name LIKE '%man%';

#Here, any movie that contains the word ‘man’ in its name will be returned in the result.

#LIKE is not case sensitive. ‘Batman’ and ‘Man of Steel’ will both appear in the result of the query above.

SELECT *
FROM movies
WHERE name LIKE '%man%';

#Edit the query so that it selects all the information about the movie titles that begin with the word ‘The’.

SELECT *
FROM movies
WHERE name LIKE 'The %';


#Is Null
#By this point of the lesson, you might have noticed that there are a few missing values in the movies table. More often than not, the data you encounter will have missing values.

#Unknown values are indicated by NULL.

#It is not possible to test for NULL values with comparison operators, such as = and !=.

#Instead, we will have to use these operators:

#IS NULL
#IS NOT NULL

SELECT name
FROM movies
WHERE imdb_rating IS NULL;


#Between
#The BETWEEN operator can be used in a WHERE clause to filter the result set within a certain range. The values can be numbers, text or dates.

#BETWEEN two letters is not inclusive of the 2nd letter.
#BETWEEN two numbers is inclusive of the 2nd number.

SELECT *
FROM movies
WHERE name BETWEEN 'A' AND 'J';

SELECT *
FROM movies
WHERE year BETWEEN 1990 AND 1999;

#Using the BETWEEN operator, write a query that selects all information about movies whose name begins with the letters ‘D’, ‘E’, and ‘F’.

SELECT *
FROM movies
WHERE name BETWEEN 'D' AND 'G';

#Using the BETWEEN operator, write a new query that selects all information about movies that were released in the 1970’s.

SELECT *
FROM movies
WHERE year BETWEEN '1970' AND '1979';


#And
#Sometimes we want to combine multiple conditions in a WHERE clause to make the result set more specific and useful.

#One way of doing this is to use the AND operator.

SELECT *
FROM movies
WHERE year BETWEEN 1990 AND 1999
AND genre = 'romance';

#Now, let’s retrieve every movie released in the 70’s, that’s also well received.

SELECT *
FROM movies
WHERE year BETWEEN 1970 AND 1979
AND imdb_rating > 8;


#Using AND, write a new query that selects all movies made prior to 1985 that are also in the horror genre.

SELECT *
FROM movies
WHERE year < 1985
AND genre == 'horror';


#Or
#Similar to AND, the OR operator can also be used to combine multiple conditions in WHERE, but there is a fundamental difference:

#AND operator displays a row if all the conditions are true.
#OR operator displays a row if any condition is true.

#Using OR, write a query that returns all movies that are either a romance or a comedy.

SELECT *
FROM movies
WHERE genre = 'comedy'
OR genre = 'romance';


#Order By
#That’s it with WHERE and its operators. Moving on!

#It is often useful to list the data in our result set in a particular order.

#We can sort the results using ORDER BY, either alphabetically or numerically. Sorting the results often makes the data more useful and easier to analyze.

#Suppose we want to retrieve the name and year columns of all the movies, ordered by their name alphabetically.

SELECT name, year
FROM movies
ORDER BY name;

#Write a new query that retrieves the name, year, and imdb_rating columns of all the movies, ordered highest to lowest by their ratings.

SELECT name, year, imdb_rating
FROM movies
ORDER BY imdb_rating DESC;


#Limit
#We’ve been working with a fairly small table (fewer than 250 rows), but most SQL tables contain hundreds of thousands of records. In those situations, it becomes important to cap the number of rows in the result.

#Combining your knowledge of LIMIT and ORDER BY, write a query that returns the top 3 highest rated movies.

SELECT *
FROM movies
ORDER BY imdb_rating DESC
LIMIT 3;


#Case
#A CASE statement allows us to create different outputs (usually in the SELECT statement). It is SQL’s way of handling if-then logic.

#Suppose we want to condense the ratings in movies to three levels:

#If the rating is above 8, then it is Fantastic.
#If the rating is above 6, then it is Poorly Received.
#Else, Avoid at All Costs.

SELECT name,
 CASE
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END
FROM movies;

#Each WHEN tests a condition and the following THEN gives us the string if the condition is true.
#The ELSE gives us the string if all the above conditions are false.
#The CASE statement must end with END.


#Select the name column and use a CASE statement to create the second column that is:

#‘Chill’ if genre = 'romance'
#‘Chill’ if genre = 'comedy'
#‘Intense’ in all other cases
#Optional: Rename the whole CASE statement to ‘Mood’ using AS.

SELECT name,
CASE
WHEN genre = 'romance' THEN 'Chill'
WHEN genre = 'comedy' THEN 'Chill'
ELSE 'Intense'
END AS 'Mood'
FROM movies;
