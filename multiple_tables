#Combining Tables Manually
Let’s return to our magazine company. Suppose we have the three tables described in the previous exercise – shown in the browser on the right (we are going to try something new!):

orders
subscriptions
customers
If we just look at the orders table, we can’t really tell what’s happened in each order. However, if we refer to the other tables, we can get a complete picture.

Let’s examine the order with an order_id of 2. It was purchased by the customer with a customer_id of 2.

To find out the customer’s name, we look at the customers table and look for the item with a customer_id value of 2. We can see that Customer 2’s name is ‘Jane Doe’ and that she lives at ‘456 Park Ave’.

Doing this kind of matching is called joining two tables.


#Combining Tables with SQL
#Combining tables manually is time-consuming. Luckily, SQL gives us an easy sequence for this: it’s called a JOIN.

#If we want to combine orders and customers, we would type:

SELECT *
FROM orders
JOIN customers
  ON orders.customer_id = customers.customer_id;

#Join orders table and subscriptions table and select all columns.

#Make sure to join on the subscription_id column.

SELECT *
FROM orders
JOIN subscriptions
ON orders.subscription_id = subscriptions.subscription_id;

#Add a second query after your first one that only selects rows from the join where description is equal to ‘Fashion Magazine’.

SELECT *
FROM orders
JOIN subscriptions
ON orders.subscription_id = subscriptions.subscription_id;


SELECT *
FROM orders
JOIN subscriptions
ON orders.subscription_id = subscriptions.subscription_id
WHERE description = 'Fashion Magazine';


#Inner Joins

#When we perform a simple JOIN (often called an inner join) our result only includes rows that match our ON condition.

#Suppose we are working for The Codecademy Times, a newspaper with two types of subscriptions:

#print newspaper
#online articles
#Some users subscribe to just the newspaper, some subscribe to just the online edition, and some subscribe to both.

#There is a newspaper table that contains information about the newspaper subscribers.

#Count the number of subscribers who get a print newspaper using COUNT().

SELECT COUNT(id)
FROM newspaper;

#There is also an online table that contains information about the online subscribers.

#Count the number of subscribers who get an online newspaper using COUNT().

SELECT COUNT(id)
FROM online;

#Join newspaper table and online table on their id columns (the unique ID of the subscriber).

#How many rows are in this table?

SELECT COUNT(*)
FROM newspaper
JOIN online
WHERE newspaper.id=online.id;


#Left Joins
#What if we want to combine two tables and keep some of the un-matched rows?

#SQL lets us do this through a command called LEFT JOIN. A left join will keep all rows from the first table, regardless of whether there is a matching row in the second table.

#Suppose we want to know how many users subscribe to the print newspaper, but not to the online.

#Start by performing a left join of newspaper table and online table on their id columns and selecting all columns.

SELECT *
FROM newspaper
LEFT JOIN online
ON newspaper.id = online.id;


#In order to find which users do not subscribe to the online edition, we need to add a WHERE clause.

SELECT *
FROM newspaper
LEFT JOIN online
ON newspaper.id = online.id
WHERE online.id IS NULL;


#Primary Key vs Foreign Key
#Let’s return to our example of the magazine subscriptions. Recall that we had three tables: orders, subscriptions, and customers.

#Each of these tables has a column that uniquely identifies each row of that table.

#These special columns are called primary keys.

#Primary keys have a few requirements:

#None of the values can be NULL.
#Each value must be unique (i.e., you can’t have two customers with the same customer_id in the customers table).
#A table can not have more than one primary key column.
#When the primary key for one table appears in a different table, it is called a foreign key.

#Why is this important? The most common types of joins will be joining a foreign key from one table with the primary key from another table.
#For instance, when we join orders and customers, we join on customer_id, which is a foreign key in orders and the primary key in customers.

#Suppose Columbia University has two tables in their database:

#The classes table contains information on the classes that the school offers. Its primary key is id.
#The students table contains information on all students in the school. Its primary key is id. It contains the foreign key class_id, which corresponds to the primary key of classes.
#Perform an inner join of classes and students using the primary and foreign keys described above, and select all the columns.

SELECT *
FROM classes
JOIN students
ON classes.id = students.class_id;


#Cross Join
#So far, we’ve focused on matching rows that have some information in common.

#Sometimes, we just want to combine all rows of one table with all rows of another table.

#Notice that cross joins don’t require an ON statement. You’re not really joining on any columns!

#A more common usage of CROSS JOIN is when we need to compare each row of a table to a list of values.

#Let’s return to our newspaper subscriptions. This table contains two columns that we haven’t discussed yet:

#start_month: the first month where the customer subscribed to the print newspaper (i.e., 2 for February)
#end_month: the final month where the customer subscribed to the print newspaper
#Suppose we wanted to know how many users were subscribed during each month of the year.
#For each month (1, 2, 3) we would need to know if a user was subscribed. Follow the steps below to see how we can use a CROSS JOIN to solve this problem.

#Let’s start by counting the number of customers who were subscribed to the newspaper during March.

SELECT COUNT(*)
FROM newspaper
WHERE start_month <= 3
AND end_month >= 3;


#The previous query lets us investigate one month at a time. In order to check across all months, we’re going to need to use a cross join.

#Our database contains another table called months which contains the numbers between 1 and 12.

#Select all columns from the cross join of newspaper and months.

SELECT COUNT(*)
FROM newspaper
WHERE start_month <= 3
AND end_month >= 3;

SELECT *
FROM newspaper
CROSS JOIN months;

#Create a third query where you add a WHERE statement to your cross join to restrict to two conditions:

#start_month <= month
#end_month >= month
#This will select all months where a user was subscribed.

FROM newspaper
CROSS JOIN months
WHERE start_month <= month
AND end_month >= month;

#Create a final query where you aggregate over each month to count the number of subscribers.

SELECT month, COUNT(*)
FROM newspaper
CROSS JOIN months
WHERE start_month <= month AND end_month >= month
GROUP BY month;


#Union
#Sometimes we just want to stack one dataset on top of the other. Well, the UNION operator allows us to do that.

#SQL has strict rules for appending data:

#Tables must have the same number of columns.
#The columns must have the same data types in the same order as the first table.


#Let’s return to our newspaper and online subscriptions. We’d like to create one big table with both sets of data.

#Use UNION to stack the newspaper table on top of the online table.

SELECT *
FROM newspaper
UNION
SELECT *
FROM online;


#With
#Often times, we want to combine two tables, but one of the tables is the result of another calculation.

#Let’s return to our magazine order example. Our marketing department might want to know a bit more about our customers.
#For instance, they might want to know how many magazines each customer subscribes to. We can easily calculate this using our orders table:

SELECT customer_id,
   COUNT(subscription_id) AS 'subscriptions'
FROM orders
GROUP BY customer_id;

#This query is good, but a customer_id isn’t terribly useful for our marketing department, they probably want to know the customer’s name.

#We want to be able to join the results of this query with our customers table, which will tell us the name of each customer.
#We can do this by using a WITH clause.

WITH previous_results AS (
   SELECT ...
   ...
   ...
   ...
)
SELECT *
FROM previous_results
JOIN customers
  ON _____ = _____;

#The WITH statement allows us to perform a separate query (such as aggregating customer’s subscriptions)
#previous_results is the alias that we will use to reference any columns from the query inside of the WITH clause
#We can then go on to do whatever we want with this temporary table (such as join the temporary table with another table)
#Essentially, we are putting a whole first query inside the parentheses () and giving it a name.
#After that, we can use this name as if it’s a table and write a new query using the first query.

#Place the whole query below into a WITH statement, inside parentheses (), and give it name previous_query:

SELECT customer_id,
   COUNT(subscription_id) AS 'subscriptions'
FROM orders
GROUP BY customer_id

#Join the temporary table previous_query with customers table and select the following columns:

#customers.customer_name
#previous_query.subscriptions

WITH previous_query AS (
SELECT customer_id,
  COUNT(subscription_id) AS 'subscriptions'
FROM orders
GROUP BY customer_id
)
SELECT customers.customer_name,
previous_query.subscriptions
FROM previous_query
JOIN customers
ON previous_query.customer_id = customers.customer_id;
